# Autogenerated from the HTML5 specification. Edits may be lost.
module Watir
















































































 class HTMLElement < Element
   attribute(:string, :title)

   attribute(:string, :lang)

   attribute(:bool, :translate)

   attribute(:string, :dir)

   attribute(:string_map, :dataset)

   attribute(:bool, :item_scope)

   attribute(:token_list, :item_type)

   attribute(:string, :item_id)

   attribute(:token_list, :item_ref)

   attribute(:token_list, :item_prop)

   attribute(:properties_collection, :properties)

   attribute(:string, :item_value)

   attribute(:bool, :hidden)

   attribute(:bool, :inert)

   attribute(:int, :tab_index)

   attribute(:string, :access_key)

   attribute(:string, :access_key_label)

   attribute(:bool, :draggable)

   attribute(:token_list, :dropzone)

   attribute(:string, :content_editable)

   attribute(:bool, :is_content_editable)

   attribute(:html_element, :context_menu)

   attribute(:bool, :spellcheck)

   attribute(:string, :command_type)

   attribute(:string, :command_label)

   attribute(:string, :command_icon)

   attribute(:bool, :command_hidden)

   attribute(:bool, :command_disabled)

   attribute(:bool, :command_checked)

   attribute(:function, :onabort)

   attribute(:function, :onblur)

   attribute(:function, :oncancel)

   attribute(:function, :oncanplay)

   attribute(:function, :oncanplaythrough)

   attribute(:function, :onchange)

   attribute(:function, :onclick)

   attribute(:function, :onclose)

   attribute(:function, :oncontextmenu)

   attribute(:function, :oncuechange)

   attribute(:function, :ondblclick)

   attribute(:function, :ondrag)

   attribute(:function, :ondragend)

   attribute(:function, :ondragenter)

   attribute(:function, :ondragexit)

   attribute(:function, :ondragleave)

   attribute(:function, :ondragover)

   attribute(:function, :ondragstart)

   attribute(:function, :ondrop)

   attribute(:function, :ondurationchange)

   attribute(:function, :onemptied)

   attribute(:function, :onended)

   attribute(:function, :onerror)

   attribute(:function, :onfocus)

   attribute(:function, :oninput)

   attribute(:function, :oninvalid)

   attribute(:function, :onkeydown)

   attribute(:function, :onkeypress)

   attribute(:function, :onkeyup)

   attribute(:function, :onload)

   attribute(:function, :onloadeddata)

   attribute(:function, :onloadedmetadata)

   attribute(:function, :onloadstart)

   attribute(:function, :onmousedown)

   attribute(:function, :onmouseenter)

   attribute(:function, :onmouseleave)

   attribute(:function, :onmousemove)

   attribute(:function, :onmouseout)

   attribute(:function, :onmouseover)

   attribute(:function, :onmouseup)

   attribute(:function, :onmousewheel)

   attribute(:function, :onpause)

   attribute(:function, :onplay)

   attribute(:function, :onplaying)

   attribute(:function, :onprogress)

   attribute(:function, :onratechange)

   attribute(:function, :onreset)

   attribute(:function, :onresize)

   attribute(:function, :onscroll)

   attribute(:function, :onseeked)

   attribute(:function, :onseeking)

   attribute(:function, :onselect)

   attribute(:function, :onshow)

   attribute(:function, :onsort)

   attribute(:function, :onstalled)

   attribute(:function, :onsubmit)

   attribute(:function, :onsuspend)

   attribute(:function, :ontimeupdate)

   attribute(:function, :ontoggle)

   attribute(:function, :onvolumechange)

   attribute(:function, :onwaiting)
 end
 class HTMLElementCollection < ElementCollection
   def element_class
     HTMLElement
   end
 end
 class Font < HTMLElement
   attribute(:string, :color)

   attribute(:string, :face)

   attribute(:string, :size)
 end
 class FontCollection < ElementCollection
   def element_class
     Font
   end
 end
 class Directory < HTMLElement
   attribute(:bool, :compact)
 end
 class DirectoryCollection < ElementCollection
   def element_class
     Directory
   end
 end
 class FrameSet < HTMLElement
   attribute(:string, :cols)

   attribute(:string, :rows)

   attribute(:function, :onafterprint)

   attribute(:function, :onbeforeprint)

   attribute(:function, :onbeforeunload)

   attribute(:function, :onhashchange)

   attribute(:function, :onlanguagechange)

   attribute(:function, :onmessage)

   attribute(:function, :onoffline)

   attribute(:function, :ononline)

   attribute(:function, :onpagehide)

   attribute(:function, :onpageshow)

   attribute(:function, :onpopstate)

   attribute(:function, :onstorage)

   attribute(:function, :onunload)
 end
 class FrameSetCollection < ElementCollection
   def element_class
     FrameSet
   end
 end
 class Marquee < HTMLElement
   attribute(:string, :behavior)

   attribute(:string, :bg_color)

   attribute(:string, :direction)

   attribute(:string, :height)

   attribute(:int, :hspace)

   attribute(:int, :loop)

   attribute(:int, :scroll_amount)

   attribute(:int, :scroll_delay)

   attribute(:bool, :true_speed)

   attribute(:int, :vspace)

   attribute(:string, :width)

   attribute(:function, :onbounce)

   attribute(:function, :onfinish)

   attribute(:function, :onstart)
 end
 class MarqueeCollection < ElementCollection
   def element_class
     Marquee
   end
 end
 class Applet < HTMLElement
   attribute(:string, :align)

   attribute(:string, :alt)

   attribute(:string, :archive)

   attribute(:string, :code)

   attribute(:string, :code_base)

   attribute(:string, :height)

   attribute(:int, :hspace)

   attribute(:string, :name)

   attribute(:string, :object)

   attribute(:int, :vspace)

   attribute(:string, :width)
 end
 class AppletCollection < ElementCollection
   def element_class
     Applet
   end
 end
 class Canvas < HTMLElement
   attribute(:int, :width)

   attribute(:int, :height)
 end
 class CanvasCollection < ElementCollection
   def element_class
     Canvas
   end
 end
 class Template < HTMLElement
   attribute(:document, :content)
 end
 class TemplateCollection < ElementCollection
   def element_class
     Template
   end
 end
 class Script < HTMLElement
   attribute(:string, :src)

   attribute(:string, :type)

   attribute(:string, :charset)

   attribute(:bool, :async)

   attribute(:bool, :defer)

   attribute(:string, :cross_origin)

   attribute(:string, :text)
 end
 class ScriptCollection < ElementCollection
   def element_class
     Script
   end
 end
 class Script < HTMLElement
   attribute(:string, :event)

   attribute(:string, :html_for)
 end
 # do nothing
 class Dialog < HTMLElement
   attribute(:bool, :open)

   attribute(:string, :return_value)
 end
 class DialogCollection < ElementCollection
   def element_class
     Dialog
   end
 end
 class MenuItem < HTMLElement
   attribute(:string, :type)

   attribute(:string, :label)

   attribute(:string, :icon)

   attribute(:bool, :disabled)

   attribute(:bool, :checked)

   attribute(:string, :radiogroup)

   attribute(:bool, :default)

   attribute(:html_element, :command)
 end
 class MenuItemCollection < ElementCollection
   def element_class
     MenuItem
   end
 end
 class Menu < HTMLElement
   attribute(:string, :type)

   attribute(:string, :label)
 end
 class MenuCollection < ElementCollection
   def element_class
     Menu
   end
 end
 class Menu < HTMLElement
   attribute(:bool, :compact)
 end
 # do nothing
 class Details < HTMLElement
   attribute(:bool, :open)
 end
 class DetailsCollection < ElementCollection
   def element_class
     Details
   end
 end
 class Legend < HTMLElement
   attribute(:html_element, :form)
 end
 class LegendCollection < ElementCollection
   def element_class
     Legend
   end
 end
 class Legend < HTMLElement
   attribute(:string, :align)
 end
 # do nothing
 class FieldSet < HTMLElement
   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:string, :name)

   attribute(:string, :type)

   attribute(:html_collection, :elements)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)
 end
 class FieldSetCollection < ElementCollection
   def element_class
     FieldSet
   end
 end
 class Meter < HTMLElement
   attribute(:float, :value)

   attribute(:float, :min)

   attribute(:float, :max)

   attribute(:float, :low)

   attribute(:float, :high)

   attribute(:float, :optimum)

   attribute(:list, :labels)
 end
 class MeterCollection < ElementCollection
   def element_class
     Meter
   end
 end
 class Progress < HTMLElement
   attribute(:float, :value)

   attribute(:float, :max)

   attribute(:float, :position)

   attribute(:list, :labels)
 end
 class ProgressCollection < ElementCollection
   def element_class
     Progress
   end
 end
 class Output < HTMLElement
   attribute(:token_list, :html_for)

   attribute(:html_element, :form)

   attribute(:string, :name)

   attribute(:string, :type)

   attribute(:string, :default_value)

   attribute(:string, :value)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)

   attribute(:list, :labels)
 end
 class OutputCollection < ElementCollection
   def element_class
     Output
   end
 end
 class Keygen < HTMLElement
   attribute(:bool, :autofocus)

   attribute(:string, :challenge)

   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:string, :keytype)

   attribute(:string, :name)

   attribute(:string, :type)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)

   attribute(:list, :labels)
 end
 class KeygenCollection < ElementCollection
   def element_class
     Keygen
   end
 end
 class TextArea < HTMLElement
   attribute(:string, :autocomplete)

   attribute(:bool, :autofocus)

   attribute(:int, :cols)

   attribute(:string, :dir_name)

   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:string, :input_mode)

   attribute(:int, :max_length)

   attribute(:int, :min_length)

   attribute(:string, :name)

   attribute(:string, :placeholder)

   attribute(:bool, :read_only)

   attribute(:bool, :required)

   attribute(:int, :rows)

   attribute(:string, :wrap)

   attribute(:string, :type)

   attribute(:string, :default_value)

   attribute(:string, :value)

   attribute(:int, :text_length)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)

   attribute(:list, :labels)

   attribute(:int, :selection_start)

   attribute(:int, :selection_end)

   attribute(:string, :selection_direction)
 end
 class TextAreaCollection < ElementCollection
   def element_class
     TextArea
   end
 end
 class Option < HTMLElement
   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:string, :label)

   attribute(:bool, :default_selected)

   attribute(:bool, :selected)

   attribute(:string, :value)

   attribute(:string, :text)

   attribute(:int, :index)
 end
 class OptionCollection < ElementCollection
   def element_class
     Option
   end
 end
 class OptGroup < HTMLElement
   attribute(:bool, :disabled)

   attribute(:string, :label)
 end
 class OptGroupCollection < ElementCollection
   def element_class
     OptGroup
   end
 end
 class DataList < HTMLElement
   attribute(:html_collection, :options)
 end
 class DataListCollection < ElementCollection
   def element_class
     DataList
   end
 end
 class Select < HTMLElement
   attribute(:bool, :autofocus)

   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:bool, :multiple)

   attribute(:string, :name)

   attribute(:bool, :required)

   attribute(:int, :size)

   attribute(:string, :type)

   attribute(:html_collection, :options)

   attribute(:int, :length)

   attribute(:html_collection, :selected_options)

   attribute(:int, :selected_index)

   attribute(:string, :value)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)

   attribute(:list, :labels)
 end
 class SelectCollection < ElementCollection
   def element_class
     Select
   end
 end
 class Button < HTMLElement
   attribute(:bool, :autofocus)

   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:string, :form_action)

   attribute(:string, :form_enctype)

   attribute(:string, :form_method)

   attribute(:bool, :form_no_validate)

   attribute(:string, :form_target)

   attribute(:string, :name)

   attribute(:string, :type)

   attribute(:string, :value)

   attribute(:html_element, :menu)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)

   attribute(:list, :labels)
 end
 class ButtonCollection < ElementCollection
   def element_class
     Button
   end
 end
 class Input < HTMLElement
   attribute(:string, :accept)

   attribute(:string, :alt)

   attribute(:string, :autocomplete)

   attribute(:bool, :autofocus)

   attribute(:bool, :default_checked)

   attribute(:bool, :checked)

   attribute(:string, :dir_name)

   attribute(:bool, :disabled)

   attribute(:html_element, :form)

   attribute(:list, :files)

   attribute(:string, :form_action)

   attribute(:string, :form_enctype)

   attribute(:string, :form_method)

   attribute(:bool, :form_no_validate)

   attribute(:string, :form_target)

   attribute(:int, :height)

   attribute(:bool, :indeterminate)

   attribute(:string, :input_mode)

   attribute(:html_element, :list)

   attribute(:string, :max)

   attribute(:int, :max_length)

   attribute(:string, :min)

   attribute(:int, :min_length)

   attribute(:bool, :multiple)

   attribute(:string, :name)

   attribute(:string, :pattern)

   attribute(:string, :placeholder)

   attribute(:bool, :read_only)

   attribute(:bool, :required)

   attribute(:int, :size)

   attribute(:string, :src)

   attribute(:string, :step)

   attribute(:string, :type)

   attribute(:string, :default_value)

   attribute(:string, :value)

   attribute(:date, :value_as_date)

   attribute(:float, :value_as_number)

   attribute(:float, :value_low)

   attribute(:float, :value_high)

   attribute(:int, :width)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)

   attribute(:list, :labels)

   attribute(:int, :selection_start)

   attribute(:int, :selection_end)

   attribute(:string, :selection_direction)
 end
 class InputCollection < ElementCollection
   def element_class
     Input
   end
 end
 class Input < HTMLElement
   attribute(:string, :align)

   attribute(:string, :use_map)
 end
 # do nothing
 class Label < HTMLElement
   attribute(:html_element, :form)

   attribute(:string, :html_for)

   attribute(:html_element, :control)
 end
 class LabelCollection < ElementCollection
   def element_class
     Label
   end
 end
 class Form < HTMLElement
   attribute(:string, :accept_charset)

   attribute(:string, :action)

   attribute(:string, :autocomplete)

   attribute(:string, :enctype)

   attribute(:string, :encoding)

   attribute(:string, :method)

   attribute(:string, :name)

   attribute(:bool, :no_validate)

   attribute(:string, :target)

   attribute(:html_collection, :elements)

   attribute(:int, :length)
 end
 class FormCollection < ElementCollection
   def element_class
     Form
   end
 end
 class TableCell < HTMLElement
   attribute(:int, :col_span)

   attribute(:int, :row_span)

   attribute(:token_list, :headers)

   attribute(:int, :cell_index)
 end
 class TableCellCollection < ElementCollection
   def element_class
     TableCell
   end
 end
 class TableCell < HTMLElement
   attribute(:string, :align)

   attribute(:string, :axis)

   attribute(:string, :height)

   attribute(:string, :width)

   attribute(:string, :ch)

   attribute(:string, :ch_off)

   attribute(:bool, :no_wrap)

   attribute(:string, :v_align)

   attribute(:string, :bg_color)
 end
 # do nothing
 class TableHeaderCell < TableCell
   attribute(:string, :scope)

   attribute(:string, :abbr)

   attribute(:string, :sorted)
 end
 class TableHeaderCellCollection < ElementCollection
   def element_class
     TableHeaderCell
   end
 end
 class TableDataCell < TableCell
 end
 class TableDataCellCollection < ElementCollection
   def element_class
     TableDataCell
   end
 end
 class TableDataCell < TableCell
   attribute(:string, :abbr)
 end
 # do nothing
 class TableRow < HTMLElement
   attribute(:int, :row_index)

   attribute(:int, :section_row_index)

   attribute(:html_collection, :cells)
 end
 class TableRowCollection < ElementCollection
   def element_class
     TableRow
   end
 end
 class TableRow < HTMLElement
   attribute(:string, :align)

   attribute(:string, :ch)

   attribute(:string, :ch_off)

   attribute(:string, :v_align)

   attribute(:string, :bg_color)
 end
 # do nothing
 class TableSection < HTMLElement
   attribute(:html_collection, :rows)
 end
 class TableSectionCollection < ElementCollection
   def element_class
     TableSection
   end
 end
 class TableSection < HTMLElement
   attribute(:string, :align)

   attribute(:string, :ch)

   attribute(:string, :ch_off)

   attribute(:string, :v_align)
 end
 # do nothing
 class TableCol < HTMLElement
   attribute(:int, :span)
 end
 class TableColCollection < ElementCollection
   def element_class
     TableCol
   end
 end
 class TableCol < HTMLElement
   attribute(:string, :align)

   attribute(:string, :ch)

   attribute(:string, :ch_off)

   attribute(:string, :v_align)

   attribute(:string, :width)
 end
 # do nothing
 class TableCaption < HTMLElement
 end
 class TableCaptionCollection < ElementCollection
   def element_class
     TableCaption
   end
 end
 class TableCaption < HTMLElement
   attribute(:string, :align)
 end
 # do nothing
 class Table < HTMLElement
   attribute(:html_element, :caption)

   attribute(:html_element, :t_head)

   attribute(:html_element, :t_foot)

   attribute(:html_collection, :t_bodies)

   attribute(:html_collection, :rows)

   attribute(:bool, :sortable)
 end
 class TableCollection < ElementCollection
   def element_class
     Table
   end
 end
 class Table < HTMLElement
   attribute(:string, :align)

   attribute(:string, :border)

   attribute(:string, :frame)

   attribute(:string, :rules)

   attribute(:string, :summary)

   attribute(:string, :width)

   attribute(:string, :bg_color)

   attribute(:string, :cell_padding)

   attribute(:string, :cell_spacing)
 end
 # do nothing
 class Area < HTMLElement
   attribute(:string, :alt)

   attribute(:string, :coords)

   attribute(:string, :shape)

   attribute(:string, :target)

   attribute(:string, :download)

   attribute(:token_list, :ping)

   attribute(:string, :rel)

   attribute(:token_list, :rel_list)

   attribute(:string, :hreflang)

   attribute(:string, :type)
 end
 class AreaCollection < ElementCollection
   def element_class
     Area
   end
 end
 class Area < HTMLElement
   attribute(:bool, :no_href)
 end
 # do nothing
 class Map < HTMLElement
   attribute(:string, :name)

   attribute(:html_collection, :areas)

   attribute(:html_collection, :images)
 end
 class MapCollection < ElementCollection
   def element_class
     Map
   end
 end
 class Media < HTMLElement
   attribute(:string, :error)

   attribute(:string, :src)

   attribute(:string, :current_src)

   attribute(:string, :cross_origin)

   attribute(:int, :network_state)

   attribute(:string, :preload)

   attribute(:string, :buffered)

   attribute(:int, :ready_state)

   attribute(:bool, :seeking)

   attribute(:float, :current_time)

   attribute(:float, :duration)

   attribute(:bool, :paused)

   attribute(:float, :default_playback_rate)

   attribute(:float, :playback_rate)

   attribute(:string, :played)

   attribute(:string, :seekable)

   attribute(:bool, :ended)

   attribute(:bool, :autoplay)

   attribute(:bool, :loop)

   attribute(:string, :media_group)

   attribute(:string, :controller)

   attribute(:bool, :controls)

   attribute(:float, :volume)

   attribute(:bool, :muted)

   attribute(:bool, :default_muted)

   attribute(:list, :audio_tracks)

   attribute(:list, :video_tracks)

   attribute(:list, :text_tracks)
 end
 class MediaCollection < ElementCollection
   def element_class
     Media
   end
 end
 class Audio < Media
 end
 class AudioCollection < ElementCollection
   def element_class
     Audio
   end
 end
 class Video < Media
   attribute(:int, :width)

   attribute(:int, :height)

   attribute(:int, :video_width)

   attribute(:int, :video_height)

   attribute(:string, :poster)
 end
 class VideoCollection < ElementCollection
   def element_class
     Video
   end
 end
 class Track < HTMLElement
   attribute(:string, :kind)

   attribute(:string, :src)

   attribute(:string, :srclang)

   attribute(:string, :label)

   attribute(:bool, :default)

   attribute(:int, :ready_state)

   attribute(:string, :track)
 end
 class TrackCollection < ElementCollection
   def element_class
     Track
   end
 end
 class Source < HTMLElement
   attribute(:string, :src)

   attribute(:string, :type)
 end
 class SourceCollection < ElementCollection
   def element_class
     Source
   end
 end
 class Param < HTMLElement
   attribute(:string, :name)

   attribute(:string, :value)
 end
 class ParamCollection < ElementCollection
   def element_class
     Param
   end
 end
 class Param < HTMLElement
   attribute(:string, :type)

   attribute(:string, :value_type)
 end
 # do nothing
 class Object < HTMLElement
   attribute(:string, :data)

   attribute(:string, :type)

   attribute(:bool, :type_must_match)

   attribute(:string, :name)

   attribute(:string, :use_map)

   attribute(:html_element, :form)

   attribute(:string, :width)

   attribute(:string, :height)

   attribute(:document, :content_document)

   attribute(:string, :content_window)

   attribute(:bool, :will_validate)

   attribute(:string, :validity)

   attribute(:string, :validation_message)
 end
 class ObjectCollection < ElementCollection
   def element_class
     Object
   end
 end
 class Object < HTMLElement
   attribute(:string, :align)

   attribute(:string, :archive)

   attribute(:string, :code)

   attribute(:bool, :declare)

   attribute(:int, :hspace)

   attribute(:string, :standby)

   attribute(:int, :vspace)

   attribute(:string, :code_base)

   attribute(:string, :code_type)

   attribute(:string, :border)
 end
 # do nothing
 class Embed < HTMLElement
   attribute(:string, :src)

   attribute(:string, :type)

   attribute(:string, :width)

   attribute(:string, :height)
 end
 class EmbedCollection < ElementCollection
   def element_class
     Embed
   end
 end
 class Embed < HTMLElement
   attribute(:string, :align)

   attribute(:string, :name)
 end
 # do nothing
 class IFrame < HTMLElement
   attribute(:string, :src)

   attribute(:string, :srcdoc)

   attribute(:string, :name)

   attribute(:token_list, :sandbox)

   attribute(:bool, :seamless)

   attribute(:bool, :allow_fullscreen)

   attribute(:string, :width)

   attribute(:string, :height)

   attribute(:document, :content_document)

   attribute(:string, :content_window)
 end
 class IFrameCollection < ElementCollection
   def element_class
     IFrame
   end
 end
 class IFrame < HTMLElement
   attribute(:string, :align)

   attribute(:string, :scrolling)

   attribute(:string, :frame_border)

   attribute(:string, :long_desc)

   attribute(:string, :margin_height)

   attribute(:string, :margin_width)
 end
 # do nothing
 class Image < HTMLElement
   attribute(:string, :alt)

   attribute(:string, :src)

   attribute(:string, :srcset)

   attribute(:string, :cross_origin)

   attribute(:string, :use_map)

   attribute(:bool, :is_map)

   attribute(:int, :width)

   attribute(:int, :height)

   attribute(:int, :natural_width)

   attribute(:int, :natural_height)

   attribute(:bool, :complete)
 end
 class ImageCollection < ElementCollection
   def element_class
     Image
   end
 end
 class Image < HTMLElement
   attribute(:string, :name)

   attribute(:string, :lowsrc)

   attribute(:string, :align)

   attribute(:int, :hspace)

   attribute(:int, :vspace)

   attribute(:string, :long_desc)

   attribute(:string, :border)
 end
 # do nothing
 class Mod < HTMLElement
   attribute(:string, :cite)

   attribute(:string, :date_time)
 end
 class ModCollection < ElementCollection
   def element_class
     Mod
   end
 end
 class BR < HTMLElement
 end
 class BRCollection < ElementCollection
   def element_class
     BR
   end
 end
 class BR < HTMLElement
   attribute(:string, :clear)
 end
 # do nothing
 class Span < HTMLElement
 end
 class SpanCollection < ElementCollection
   def element_class
     Span
   end
 end
 class Time < HTMLElement
   attribute(:string, :date_time)
 end
 class TimeCollection < ElementCollection
   def element_class
     Time
   end
 end
 class Data < HTMLElement
   attribute(:string, :value)
 end
 class DataCollection < ElementCollection
   def element_class
     Data
   end
 end
 class Anchor < HTMLElement
   attribute(:string, :target)

   attribute(:string, :download)

   attribute(:token_list, :ping)

   attribute(:string, :rel)

   attribute(:token_list, :rel_list)

   attribute(:string, :hreflang)

   attribute(:string, :type)

   attribute(:string, :text)
 end
 class AnchorCollection < ElementCollection
   def element_class
     Anchor
   end
 end
 class Anchor < HTMLElement
   attribute(:string, :coords)

   attribute(:string, :charset)

   attribute(:string, :name)

   attribute(:string, :rev)

   attribute(:string, :shape)
 end
 # do nothing
 class Div < HTMLElement
 end
 class DivCollection < ElementCollection
   def element_class
     Div
   end
 end
 class Div < HTMLElement
   attribute(:string, :align)
 end
 # do nothing
 class DList < HTMLElement
 end
 class DListCollection < ElementCollection
   def element_class
     DList
   end
 end
 class DList < HTMLElement
   attribute(:bool, :compact)
 end
 # do nothing
 class LI < HTMLElement
   attribute(:int, :value)
 end
 class LICollection < ElementCollection
   def element_class
     LI
   end
 end
 class LI < HTMLElement
   attribute(:string, :type)
 end
 # do nothing
 class UList < HTMLElement
 end
 class UListCollection < ElementCollection
   def element_class
     UList
   end
 end
 class UList < HTMLElement
   attribute(:bool, :compact)

   attribute(:string, :type)
 end
 # do nothing
 class OList < HTMLElement
   attribute(:bool, :reversed)

   attribute(:int, :start)

   attribute(:string, :type)
 end
 class OListCollection < ElementCollection
   def element_class
     OList
   end
 end
 class OList < HTMLElement
   attribute(:bool, :compact)
 end
 # do nothing
 class Quote < HTMLElement
   attribute(:string, :cite)
 end
 class QuoteCollection < ElementCollection
   def element_class
     Quote
   end
 end
 class Pre < HTMLElement
 end
 class PreCollection < ElementCollection
   def element_class
     Pre
   end
 end
 class Pre < HTMLElement
   attribute(:int, :width)
 end
 # do nothing
 class HR < HTMLElement
 end
 class HRCollection < ElementCollection
   def element_class
     HR
   end
 end
 class HR < HTMLElement
   attribute(:string, :align)

   attribute(:string, :color)

   attribute(:bool, :no_shade)

   attribute(:string, :size)

   attribute(:string, :width)
 end
 # do nothing
 class Paragraph < HTMLElement
 end
 class ParagraphCollection < ElementCollection
   def element_class
     Paragraph
   end
 end
 class Paragraph < HTMLElement
   attribute(:string, :align)
 end
 # do nothing
 class Heading < HTMLElement
 end
 class HeadingCollection < ElementCollection
   def element_class
     Heading
   end
 end
 class Heading < HTMLElement
   attribute(:string, :align)
 end
 # do nothing
 class Body < HTMLElement
   attribute(:function, :onafterprint)

   attribute(:function, :onbeforeprint)

   attribute(:function, :onbeforeunload)

   attribute(:function, :onhashchange)

   attribute(:function, :onlanguagechange)

   attribute(:function, :onmessage)

   attribute(:function, :onoffline)

   attribute(:function, :ononline)

   attribute(:function, :onpagehide)

   attribute(:function, :onpageshow)

   attribute(:function, :onpopstate)

   attribute(:function, :onstorage)

   attribute(:function, :onunload)
 end
 class BodyCollection < ElementCollection
   def element_class
     Body
   end
 end
 class Body < HTMLElement
   attribute(:string, :text)

   attribute(:string, :link)

   attribute(:string, :v_link)

   attribute(:string, :a_link)

   attribute(:string, :bg_color)

   attribute(:string, :background)
 end
 # do nothing
 class Style < HTMLElement
   attribute(:string, :media)

   attribute(:string, :type)

   attribute(:bool, :scoped)
 end
 class StyleCollection < ElementCollection
   def element_class
     Style
   end
 end
 class Meta < HTMLElement
   attribute(:string, :name)

   attribute(:string, :http_equiv)

   attribute(:string, :content)
 end
 class MetaCollection < ElementCollection
   def element_class
     Meta
   end
 end
 class Meta < HTMLElement
   attribute(:string, :scheme)
 end
 # do nothing
 class Base < HTMLElement
   attribute(:string, :href)

   attribute(:string, :target)
 end
 class BaseCollection < ElementCollection
   def element_class
     Base
   end
 end
 class Title < HTMLElement
   attribute(:string, :text)
 end
 class TitleCollection < ElementCollection
   def element_class
     Title
   end
 end
 class Head < HTMLElement
 end
 class HeadCollection < ElementCollection
   def element_class
     Head
   end
 end
 class Html < HTMLElement
 end
 class HtmlCollection < ElementCollection
   def element_class
     Html
   end
 end
 class Html < HTMLElement
   attribute(:string, :version)
 end
 # do nothing
 class Unknown < HTMLElement
 end
 class UnknownCollection < ElementCollection
   def element_class
     Unknown
   end
 end











 module Container
   #
   # @return [Anchor]
   #

   def a(*args)
     Anchor.new(self, extract_selector(args).merge(:tag_name => "a"))
   end

   #
   # @return [AnchorCollection]
   #

   def as(*args)
     AnchorCollection.new(self, extract_selector(args).merge(:tag_name => "a"))
   end

   Watir.tag_to_class[:a] = Anchor
   #
   # @return [HTMLElement]
   #

   def abbr(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "abbr"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def abbrs(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "abbr"))
   end

   Watir.tag_to_class[:abbr] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def address(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "address"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def addresses(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "address"))
   end

   Watir.tag_to_class[:address] = HTMLElement
   #
   # @return [Area]
   #

   def area(*args)
     Area.new(self, extract_selector(args).merge(:tag_name => "area"))
   end

   #
   # @return [AreaCollection]
   #

   def areas(*args)
     AreaCollection.new(self, extract_selector(args).merge(:tag_name => "area"))
   end

   Watir.tag_to_class[:area] = Area
   #
   # @return [HTMLElement]
   #

   def article(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "article"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def articles(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "article"))
   end

   Watir.tag_to_class[:article] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def aside(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "aside"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def asides(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "aside"))
   end

   Watir.tag_to_class[:aside] = HTMLElement
   #
   # @return [Audio]
   #

   def audio(*args)
     Audio.new(self, extract_selector(args).merge(:tag_name => "audio"))
   end

   #
   # @return [AudioCollection]
   #

   def audios(*args)
     AudioCollection.new(self, extract_selector(args).merge(:tag_name => "audio"))
   end

   Watir.tag_to_class[:audio] = Audio
   #
   # @return [HTMLElement]
   #

   def b(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "b"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def bs(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "b"))
   end

   Watir.tag_to_class[:b] = HTMLElement
   #
   # @return [Base]
   #

   def base(*args)
     Base.new(self, extract_selector(args).merge(:tag_name => "base"))
   end

   #
   # @return [BaseCollection]
   #

   def bases(*args)
     BaseCollection.new(self, extract_selector(args).merge(:tag_name => "base"))
   end

   Watir.tag_to_class[:base] = Base
   #
   # @return [HTMLElement]
   #

   def bdi(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "bdi"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def bdis(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "bdi"))
   end

   Watir.tag_to_class[:bdi] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def bdo(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "bdo"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def bdos(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "bdo"))
   end

   Watir.tag_to_class[:bdo] = HTMLElement
   #
   # @return [Quote]
   #

   def blockquote(*args)
     Quote.new(self, extract_selector(args).merge(:tag_name => "blockquote"))
   end

   #
   # @return [QuoteCollection]
   #

   def blockquotes(*args)
     QuoteCollection.new(self, extract_selector(args).merge(:tag_name => "blockquote"))
   end

   Watir.tag_to_class[:blockquote] = Quote
   #
   # @return [Body]
   #

   def body(*args)
     Body.new(self, extract_selector(args).merge(:tag_name => "body"))
   end

   #
   # @return [BodyCollection]
   #

   def bodys(*args)
     BodyCollection.new(self, extract_selector(args).merge(:tag_name => "body"))
   end

   Watir.tag_to_class[:body] = Body
   #
   # @return [BR]
   #

   def br(*args)
     BR.new(self, extract_selector(args).merge(:tag_name => "br"))
   end

   #
   # @return [BRCollection]
   #

   def brs(*args)
     BRCollection.new(self, extract_selector(args).merge(:tag_name => "br"))
   end

   Watir.tag_to_class[:br] = BR
   #
   # @return [Button]
   #

   def button(*args)
     Button.new(self, extract_selector(args).merge(:tag_name => "button"))
   end

   #
   # @return [ButtonCollection]
   #

   def buttons(*args)
     ButtonCollection.new(self, extract_selector(args).merge(:tag_name => "button"))
   end

   Watir.tag_to_class[:button] = Button
   #
   # @return [Canvas]
   #

   def canvas(*args)
     Canvas.new(self, extract_selector(args).merge(:tag_name => "canvas"))
   end

   #
   # @return [CanvasCollection]
   #

   def canvases(*args)
     CanvasCollection.new(self, extract_selector(args).merge(:tag_name => "canvas"))
   end

   Watir.tag_to_class[:canvas] = Canvas
   #
   # @return [TableCaption]
   #

   def caption(*args)
     TableCaption.new(self, extract_selector(args).merge(:tag_name => "caption"))
   end

   #
   # @return [TableCaptionCollection]
   #

   def captions(*args)
     TableCaptionCollection.new(self, extract_selector(args).merge(:tag_name => "caption"))
   end

   Watir.tag_to_class[:caption] = TableCaption
   #
   # @return [HTMLElement]
   #

   def cite(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "cite"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def cites(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "cite"))
   end

   Watir.tag_to_class[:cite] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def code(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "code"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def codes(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "code"))
   end

   Watir.tag_to_class[:code] = HTMLElement
   #
   # @return [TableCol]
   #

   def col(*args)
     TableCol.new(self, extract_selector(args).merge(:tag_name => "col"))
   end

   #
   # @return [TableColCollection]
   #

   def cols(*args)
     TableColCollection.new(self, extract_selector(args).merge(:tag_name => "col"))
   end

   Watir.tag_to_class[:col] = TableCol
   #
   # @return [TableCol]
   #

   def colgroup(*args)
     TableCol.new(self, extract_selector(args).merge(:tag_name => "colgroup"))
   end

   #
   # @return [TableColCollection]
   #

   def colgroups(*args)
     TableColCollection.new(self, extract_selector(args).merge(:tag_name => "colgroup"))
   end

   Watir.tag_to_class[:colgroup] = TableCol
   #
   # @return [Data]
   #

   def data(*args)
     Data.new(self, extract_selector(args).merge(:tag_name => "data"))
   end

   #
   # @return [DataCollection]
   #

   def datas(*args)
     DataCollection.new(self, extract_selector(args).merge(:tag_name => "data"))
   end

   Watir.tag_to_class[:data] = Data
   #
   # @return [DataList]
   #

   def datalist(*args)
     DataList.new(self, extract_selector(args).merge(:tag_name => "datalist"))
   end

   #
   # @return [DataListCollection]
   #

   def datalists(*args)
     DataListCollection.new(self, extract_selector(args).merge(:tag_name => "datalist"))
   end

   Watir.tag_to_class[:datalist] = DataList
   #
   # @return [HTMLElement]
   #

   def dd(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "dd"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def dds(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "dd"))
   end

   Watir.tag_to_class[:dd] = HTMLElement
   #
   # @return [Mod]
   #

   def del(*args)
     Mod.new(self, extract_selector(args).merge(:tag_name => "del"))
   end

   #
   # @return [ModCollection]
   #

   def dels(*args)
     ModCollection.new(self, extract_selector(args).merge(:tag_name => "del"))
   end

   Watir.tag_to_class[:del] = Mod
   #
   # @return [Details]
   #

   def details(*args)
     Details.new(self, extract_selector(args).merge(:tag_name => "details"))
   end

   #
   # @return [DetailsCollection]
   #

   def detailses(*args)
     DetailsCollection.new(self, extract_selector(args).merge(:tag_name => "details"))
   end

   Watir.tag_to_class[:details] = Details
   #
   # @return [HTMLElement]
   #

   def dfn(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "dfn"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def dfns(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "dfn"))
   end

   Watir.tag_to_class[:dfn] = HTMLElement
   #
   # @return [Dialog]
   #

   def dialog(*args)
     Dialog.new(self, extract_selector(args).merge(:tag_name => "dialog"))
   end

   #
   # @return [DialogCollection]
   #

   def dialogs(*args)
     DialogCollection.new(self, extract_selector(args).merge(:tag_name => "dialog"))
   end

   Watir.tag_to_class[:dialog] = Dialog
   #
   # @return [Div]
   #

   def div(*args)
     Div.new(self, extract_selector(args).merge(:tag_name => "div"))
   end

   #
   # @return [DivCollection]
   #

   def divs(*args)
     DivCollection.new(self, extract_selector(args).merge(:tag_name => "div"))
   end

   Watir.tag_to_class[:div] = Div
   #
   # @return [DList]
   #

   def dl(*args)
     DList.new(self, extract_selector(args).merge(:tag_name => "dl"))
   end

   #
   # @return [DListCollection]
   #

   def dls(*args)
     DListCollection.new(self, extract_selector(args).merge(:tag_name => "dl"))
   end

   Watir.tag_to_class[:dl] = DList
   #
   # @return [HTMLElement]
   #

   def dt(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "dt"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def dts(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "dt"))
   end

   Watir.tag_to_class[:dt] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def em(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "em"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def ems(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "em"))
   end

   Watir.tag_to_class[:em] = HTMLElement
   #
   # @return [Embed]
   #

   def embed(*args)
     Embed.new(self, extract_selector(args).merge(:tag_name => "embed"))
   end

   #
   # @return [EmbedCollection]
   #

   def embeds(*args)
     EmbedCollection.new(self, extract_selector(args).merge(:tag_name => "embed"))
   end

   Watir.tag_to_class[:embed] = Embed
   #
   # @return [FieldSet]
   #

   def fieldset(*args)
     FieldSet.new(self, extract_selector(args).merge(:tag_name => "fieldset"))
   end

   #
   # @return [FieldSetCollection]
   #

   def fieldsets(*args)
     FieldSetCollection.new(self, extract_selector(args).merge(:tag_name => "fieldset"))
   end

   Watir.tag_to_class[:fieldset] = FieldSet
   #
   # @return [HTMLElement]
   #

   def figcaption(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "figcaption"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def figcaptions(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "figcaption"))
   end

   Watir.tag_to_class[:figcaption] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def figure(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "figure"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def figures(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "figure"))
   end

   Watir.tag_to_class[:figure] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def footer(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "footer"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def footers(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "footer"))
   end

   Watir.tag_to_class[:footer] = HTMLElement
   #
   # @return [Form]
   #

   def form(*args)
     Form.new(self, extract_selector(args).merge(:tag_name => "form"))
   end

   #
   # @return [FormCollection]
   #

   def forms(*args)
     FormCollection.new(self, extract_selector(args).merge(:tag_name => "form"))
   end

   Watir.tag_to_class[:form] = Form
   #
   # @return [FrameSet]
   #

   def frameset(*args)
     FrameSet.new(self, extract_selector(args).merge(:tag_name => "frameset"))
   end

   #
   # @return [FrameSetCollection]
   #

   def framesets(*args)
     FrameSetCollection.new(self, extract_selector(args).merge(:tag_name => "frameset"))
   end

   Watir.tag_to_class[:frameset] = FrameSet
   #
   # @return [Heading]
   #

   def h1(*args)
     Heading.new(self, extract_selector(args).merge(:tag_name => "h1"))
   end

   #
   # @return [HeadingCollection]
   #

   def h1s(*args)
     HeadingCollection.new(self, extract_selector(args).merge(:tag_name => "h1"))
   end

   Watir.tag_to_class[:h1] = Heading
   #
   # @return [Heading]
   #

   def h2(*args)
     Heading.new(self, extract_selector(args).merge(:tag_name => "h2"))
   end

   #
   # @return [HeadingCollection]
   #

   def h2s(*args)
     HeadingCollection.new(self, extract_selector(args).merge(:tag_name => "h2"))
   end

   Watir.tag_to_class[:h2] = Heading
   #
   # @return [Heading]
   #

   def h3(*args)
     Heading.new(self, extract_selector(args).merge(:tag_name => "h3"))
   end

   #
   # @return [HeadingCollection]
   #

   def h3s(*args)
     HeadingCollection.new(self, extract_selector(args).merge(:tag_name => "h3"))
   end

   Watir.tag_to_class[:h3] = Heading
   #
   # @return [Heading]
   #

   def h4(*args)
     Heading.new(self, extract_selector(args).merge(:tag_name => "h4"))
   end

   #
   # @return [HeadingCollection]
   #

   def h4s(*args)
     HeadingCollection.new(self, extract_selector(args).merge(:tag_name => "h4"))
   end

   Watir.tag_to_class[:h4] = Heading
   #
   # @return [Heading]
   #

   def h5(*args)
     Heading.new(self, extract_selector(args).merge(:tag_name => "h5"))
   end

   #
   # @return [HeadingCollection]
   #

   def h5s(*args)
     HeadingCollection.new(self, extract_selector(args).merge(:tag_name => "h5"))
   end

   Watir.tag_to_class[:h5] = Heading
   #
   # @return [Heading]
   #

   def h6(*args)
     Heading.new(self, extract_selector(args).merge(:tag_name => "h6"))
   end

   #
   # @return [HeadingCollection]
   #

   def h6s(*args)
     HeadingCollection.new(self, extract_selector(args).merge(:tag_name => "h6"))
   end

   Watir.tag_to_class[:h6] = Heading
   #
   # @return [Head]
   #

   def head(*args)
     Head.new(self, extract_selector(args).merge(:tag_name => "head"))
   end

   #
   # @return [HeadCollection]
   #

   def heads(*args)
     HeadCollection.new(self, extract_selector(args).merge(:tag_name => "head"))
   end

   Watir.tag_to_class[:head] = Head
   #
   # @return [HTMLElement]
   #

   def header(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "header"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def headers(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "header"))
   end

   Watir.tag_to_class[:header] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def hgroup(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "hgroup"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def hgroups(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "hgroup"))
   end

   Watir.tag_to_class[:hgroup] = HTMLElement
   #
   # @return [HR]
   #

   def hr(*args)
     HR.new(self, extract_selector(args).merge(:tag_name => "hr"))
   end

   #
   # @return [HRCollection]
   #

   def hrs(*args)
     HRCollection.new(self, extract_selector(args).merge(:tag_name => "hr"))
   end

   Watir.tag_to_class[:hr] = HR
   #
   # @return [Html]
   #

   def html(*args)
     Html.new(self, extract_selector(args).merge(:tag_name => "html"))
   end

   #
   # @return [HtmlCollection]
   #

   def htmls(*args)
     HtmlCollection.new(self, extract_selector(args).merge(:tag_name => "html"))
   end

   Watir.tag_to_class[:html] = Html
   #
   # @return [HTMLElement]
   #

   def i(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "i"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def is(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "i"))
   end

   Watir.tag_to_class[:i] = HTMLElement
   #
   # @return [IFrame]
   #

   def iframe(*args)
     IFrame.new(self, extract_selector(args).merge(:tag_name => "iframe"))
   end

   #
   # @return [IFrameCollection]
   #

   def iframes(*args)
     IFrameCollection.new(self, extract_selector(args).merge(:tag_name => "iframe"))
   end

   Watir.tag_to_class[:iframe] = IFrame
   #
   # @return [Image]
   #

   def img(*args)
     Image.new(self, extract_selector(args).merge(:tag_name => "img"))
   end

   #
   # @return [ImageCollection]
   #

   def imgs(*args)
     ImageCollection.new(self, extract_selector(args).merge(:tag_name => "img"))
   end

   Watir.tag_to_class[:img] = Image
   #
   # @return [Input]
   #

   def input(*args)
     Input.new(self, extract_selector(args).merge(:tag_name => "input"))
   end

   #
   # @return [InputCollection]
   #

   def inputs(*args)
     InputCollection.new(self, extract_selector(args).merge(:tag_name => "input"))
   end

   Watir.tag_to_class[:input] = Input
   #
   # @return [Mod]
   #

   def ins(*args)
     Mod.new(self, extract_selector(args).merge(:tag_name => "ins"))
   end

   #
   # @return [ModCollection]
   #

   def inses(*args)
     ModCollection.new(self, extract_selector(args).merge(:tag_name => "ins"))
   end

   Watir.tag_to_class[:ins] = Mod
   #
   # @return [HTMLElement]
   #

   def kbd(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "kbd"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def kbds(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "kbd"))
   end

   Watir.tag_to_class[:kbd] = HTMLElement
   #
   # @return [Keygen]
   #

   def keygen(*args)
     Keygen.new(self, extract_selector(args).merge(:tag_name => "keygen"))
   end

   #
   # @return [KeygenCollection]
   #

   def keygens(*args)
     KeygenCollection.new(self, extract_selector(args).merge(:tag_name => "keygen"))
   end

   Watir.tag_to_class[:keygen] = Keygen
   #
   # @return [Label]
   #

   def label(*args)
     Label.new(self, extract_selector(args).merge(:tag_name => "label"))
   end

   #
   # @return [LabelCollection]
   #

   def labels(*args)
     LabelCollection.new(self, extract_selector(args).merge(:tag_name => "label"))
   end

   Watir.tag_to_class[:label] = Label
   #
   # @return [Legend]
   #

   def legend(*args)
     Legend.new(self, extract_selector(args).merge(:tag_name => "legend"))
   end

   #
   # @return [LegendCollection]
   #

   def legends(*args)
     LegendCollection.new(self, extract_selector(args).merge(:tag_name => "legend"))
   end

   Watir.tag_to_class[:legend] = Legend
   #
   # @return [LI]
   #

   def li(*args)
     LI.new(self, extract_selector(args).merge(:tag_name => "li"))
   end

   #
   # @return [LICollection]
   #

   def lis(*args)
     LICollection.new(self, extract_selector(args).merge(:tag_name => "li"))
   end

   Watir.tag_to_class[:li] = LI
   #
   # @return [HTMLElement]
   #

   def main(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "main"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def mains(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "main"))
   end

   Watir.tag_to_class[:main] = HTMLElement
   #
   # @return [Map]
   #

   def map(*args)
     Map.new(self, extract_selector(args).merge(:tag_name => "map"))
   end

   #
   # @return [MapCollection]
   #

   def maps(*args)
     MapCollection.new(self, extract_selector(args).merge(:tag_name => "map"))
   end

   Watir.tag_to_class[:map] = Map
   #
   # @return [HTMLElement]
   #

   def mark(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "mark"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def marks(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "mark"))
   end

   Watir.tag_to_class[:mark] = HTMLElement
   #
   # @return [Menu]
   #

   def menu(*args)
     Menu.new(self, extract_selector(args).merge(:tag_name => "menu"))
   end

   #
   # @return [MenuCollection]
   #

   def menus(*args)
     MenuCollection.new(self, extract_selector(args).merge(:tag_name => "menu"))
   end

   Watir.tag_to_class[:menu] = Menu
   #
   # @return [MenuItem]
   #

   def menuitem(*args)
     MenuItem.new(self, extract_selector(args).merge(:tag_name => "menuitem"))
   end

   #
   # @return [MenuItemCollection]
   #

   def menuitems(*args)
     MenuItemCollection.new(self, extract_selector(args).merge(:tag_name => "menuitem"))
   end

   Watir.tag_to_class[:menuitem] = MenuItem
   #
   # @return [Meta]
   #

   def meta(*args)
     Meta.new(self, extract_selector(args).merge(:tag_name => "meta"))
   end

   #
   # @return [MetaCollection]
   #

   def metas(*args)
     MetaCollection.new(self, extract_selector(args).merge(:tag_name => "meta"))
   end

   Watir.tag_to_class[:meta] = Meta
   #
   # @return [Meter]
   #

   def meter(*args)
     Meter.new(self, extract_selector(args).merge(:tag_name => "meter"))
   end

   #
   # @return [MeterCollection]
   #

   def meters(*args)
     MeterCollection.new(self, extract_selector(args).merge(:tag_name => "meter"))
   end

   Watir.tag_to_class[:meter] = Meter
   #
   # @return [HTMLElement]
   #

   def nav(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "nav"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def navs(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "nav"))
   end

   Watir.tag_to_class[:nav] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def noscript(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "noscript"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def noscripts(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "noscript"))
   end

   Watir.tag_to_class[:noscript] = HTMLElement
   #
   # @return [Object]
   #

   def object(*args)
     Object.new(self, extract_selector(args).merge(:tag_name => "object"))
   end

   #
   # @return [ObjectCollection]
   #

   def objects(*args)
     ObjectCollection.new(self, extract_selector(args).merge(:tag_name => "object"))
   end

   Watir.tag_to_class[:object] = Object
   #
   # @return [OList]
   #

   def ol(*args)
     OList.new(self, extract_selector(args).merge(:tag_name => "ol"))
   end

   #
   # @return [OListCollection]
   #

   def ols(*args)
     OListCollection.new(self, extract_selector(args).merge(:tag_name => "ol"))
   end

   Watir.tag_to_class[:ol] = OList
   #
   # @return [OptGroup]
   #

   def optgroup(*args)
     OptGroup.new(self, extract_selector(args).merge(:tag_name => "optgroup"))
   end

   #
   # @return [OptGroupCollection]
   #

   def optgroups(*args)
     OptGroupCollection.new(self, extract_selector(args).merge(:tag_name => "optgroup"))
   end

   Watir.tag_to_class[:optgroup] = OptGroup
   #
   # @return [Option]
   #

   def option(*args)
     Option.new(self, extract_selector(args).merge(:tag_name => "option"))
   end

   #
   # @return [OptionCollection]
   #

   def options(*args)
     OptionCollection.new(self, extract_selector(args).merge(:tag_name => "option"))
   end

   Watir.tag_to_class[:option] = Option
   #
   # @return [Output]
   #

   def output(*args)
     Output.new(self, extract_selector(args).merge(:tag_name => "output"))
   end

   #
   # @return [OutputCollection]
   #

   def outputs(*args)
     OutputCollection.new(self, extract_selector(args).merge(:tag_name => "output"))
   end

   Watir.tag_to_class[:output] = Output
   #
   # @return [Paragraph]
   #

   def p(*args)
     Paragraph.new(self, extract_selector(args).merge(:tag_name => "p"))
   end

   #
   # @return [ParagraphCollection]
   #

   def ps(*args)
     ParagraphCollection.new(self, extract_selector(args).merge(:tag_name => "p"))
   end

   Watir.tag_to_class[:p] = Paragraph
   #
   # @return [Param]
   #

   def param(*args)
     Param.new(self, extract_selector(args).merge(:tag_name => "param"))
   end

   #
   # @return [ParamCollection]
   #

   def params(*args)
     ParamCollection.new(self, extract_selector(args).merge(:tag_name => "param"))
   end

   Watir.tag_to_class[:param] = Param
   #
   # @return [Pre]
   #

   def pre(*args)
     Pre.new(self, extract_selector(args).merge(:tag_name => "pre"))
   end

   #
   # @return [PreCollection]
   #

   def pres(*args)
     PreCollection.new(self, extract_selector(args).merge(:tag_name => "pre"))
   end

   Watir.tag_to_class[:pre] = Pre
   #
   # @return [Progress]
   #

   def progress(*args)
     Progress.new(self, extract_selector(args).merge(:tag_name => "progress"))
   end

   #
   # @return [ProgressCollection]
   #

   def progresses(*args)
     ProgressCollection.new(self, extract_selector(args).merge(:tag_name => "progress"))
   end

   Watir.tag_to_class[:progress] = Progress
   #
   # @return [Quote]
   #

   def q(*args)
     Quote.new(self, extract_selector(args).merge(:tag_name => "q"))
   end

   #
   # @return [QuoteCollection]
   #

   def qs(*args)
     QuoteCollection.new(self, extract_selector(args).merge(:tag_name => "q"))
   end

   Watir.tag_to_class[:q] = Quote
   #
   # @return [HTMLElement]
   #

   def rp(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "rp"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def rps(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "rp"))
   end

   Watir.tag_to_class[:rp] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def rt(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "rt"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def rts(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "rt"))
   end

   Watir.tag_to_class[:rt] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def ruby(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "ruby"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def rubies(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "ruby"))
   end

   Watir.tag_to_class[:ruby] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def s(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "s"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def ss(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "s"))
   end

   Watir.tag_to_class[:s] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def samp(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "samp"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def samps(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "samp"))
   end

   Watir.tag_to_class[:samp] = HTMLElement
   #
   # @return [Script]
   #

   def script(*args)
     Script.new(self, extract_selector(args).merge(:tag_name => "script"))
   end

   #
   # @return [ScriptCollection]
   #

   def scripts(*args)
     ScriptCollection.new(self, extract_selector(args).merge(:tag_name => "script"))
   end

   Watir.tag_to_class[:script] = Script
   #
   # @return [HTMLElement]
   #

   def section(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "section"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def sections(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "section"))
   end

   Watir.tag_to_class[:section] = HTMLElement
   #
   # @return [Select]
   #

   def select(*args)
     Select.new(self, extract_selector(args).merge(:tag_name => "select"))
   end

   #
   # @return [SelectCollection]
   #

   def selects(*args)
     SelectCollection.new(self, extract_selector(args).merge(:tag_name => "select"))
   end

   Watir.tag_to_class[:select] = Select
   #
   # @return [HTMLElement]
   #

   def small(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "small"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def smalls(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "small"))
   end

   Watir.tag_to_class[:small] = HTMLElement
   #
   # @return [Source]
   #

   def source(*args)
     Source.new(self, extract_selector(args).merge(:tag_name => "source"))
   end

   #
   # @return [SourceCollection]
   #

   def sources(*args)
     SourceCollection.new(self, extract_selector(args).merge(:tag_name => "source"))
   end

   Watir.tag_to_class[:source] = Source
   #
   # @return [Span]
   #

   def span(*args)
     Span.new(self, extract_selector(args).merge(:tag_name => "span"))
   end

   #
   # @return [SpanCollection]
   #

   def spans(*args)
     SpanCollection.new(self, extract_selector(args).merge(:tag_name => "span"))
   end

   Watir.tag_to_class[:span] = Span
   #
   # @return [HTMLElement]
   #

   def strong(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "strong"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def strongs(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "strong"))
   end

   Watir.tag_to_class[:strong] = HTMLElement
   #
   # @return [Style]
   #

   def style(*args)
     Style.new(self, extract_selector(args).merge(:tag_name => "style"))
   end

   #
   # @return [StyleCollection]
   #

   def styles(*args)
     StyleCollection.new(self, extract_selector(args).merge(:tag_name => "style"))
   end

   Watir.tag_to_class[:style] = Style
   #
   # @return [HTMLElement]
   #

   def sub(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "sub"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def subs(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "sub"))
   end

   Watir.tag_to_class[:sub] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def summary(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "summary"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def summaries(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "summary"))
   end

   Watir.tag_to_class[:summary] = HTMLElement
   #
   # @return [HTMLElement]
   #

   def sup(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "sup"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def sups(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "sup"))
   end

   Watir.tag_to_class[:sup] = HTMLElement
   #
   # @return [Table]
   #

   def table(*args)
     Table.new(self, extract_selector(args).merge(:tag_name => "table"))
   end

   #
   # @return [TableCollection]
   #

   def tables(*args)
     TableCollection.new(self, extract_selector(args).merge(:tag_name => "table"))
   end

   Watir.tag_to_class[:table] = Table
   #
   # @return [TableSection]
   #

   def tbody(*args)
     TableSection.new(self, extract_selector(args).merge(:tag_name => "tbody"))
   end

   #
   # @return [TableSectionCollection]
   #

   def tbodys(*args)
     TableSectionCollection.new(self, extract_selector(args).merge(:tag_name => "tbody"))
   end

   Watir.tag_to_class[:tbody] = TableSection
   #
   # @return [TableDataCell]
   #

   def td(*args)
     TableDataCell.new(self, extract_selector(args).merge(:tag_name => "td"))
   end

   #
   # @return [TableDataCellCollection]
   #

   def tds(*args)
     TableDataCellCollection.new(self, extract_selector(args).merge(:tag_name => "td"))
   end

   Watir.tag_to_class[:td] = TableDataCell
   #
   # @return [Template]
   #

   def template(*args)
     Template.new(self, extract_selector(args).merge(:tag_name => "template"))
   end

   #
   # @return [TemplateCollection]
   #

   def templates(*args)
     TemplateCollection.new(self, extract_selector(args).merge(:tag_name => "template"))
   end

   Watir.tag_to_class[:template] = Template
   #
   # @return [TextArea]
   #

   def textarea(*args)
     TextArea.new(self, extract_selector(args).merge(:tag_name => "textarea"))
   end

   #
   # @return [TextAreaCollection]
   #

   def textareas(*args)
     TextAreaCollection.new(self, extract_selector(args).merge(:tag_name => "textarea"))
   end

   Watir.tag_to_class[:textarea] = TextArea
   #
   # @return [TableSection]
   #

   def tfoot(*args)
     TableSection.new(self, extract_selector(args).merge(:tag_name => "tfoot"))
   end

   #
   # @return [TableSectionCollection]
   #

   def tfoots(*args)
     TableSectionCollection.new(self, extract_selector(args).merge(:tag_name => "tfoot"))
   end

   Watir.tag_to_class[:tfoot] = TableSection
   #
   # @return [TableHeaderCell]
   #

   def th(*args)
     TableHeaderCell.new(self, extract_selector(args).merge(:tag_name => "th"))
   end

   #
   # @return [TableHeaderCellCollection]
   #

   def ths(*args)
     TableHeaderCellCollection.new(self, extract_selector(args).merge(:tag_name => "th"))
   end

   Watir.tag_to_class[:th] = TableHeaderCell
   #
   # @return [TableSection]
   #

   def thead(*args)
     TableSection.new(self, extract_selector(args).merge(:tag_name => "thead"))
   end

   #
   # @return [TableSectionCollection]
   #

   def theads(*args)
     TableSectionCollection.new(self, extract_selector(args).merge(:tag_name => "thead"))
   end

   Watir.tag_to_class[:thead] = TableSection
   #
   # @return [Time]
   #

   def time(*args)
     Time.new(self, extract_selector(args).merge(:tag_name => "time"))
   end

   #
   # @return [TimeCollection]
   #

   def times(*args)
     TimeCollection.new(self, extract_selector(args).merge(:tag_name => "time"))
   end

   Watir.tag_to_class[:time] = Time
   #
   # @return [Title]
   #

   def title(*args)
     Title.new(self, extract_selector(args).merge(:tag_name => "title"))
   end

   #
   # @return [TitleCollection]
   #

   def titles(*args)
     TitleCollection.new(self, extract_selector(args).merge(:tag_name => "title"))
   end

   Watir.tag_to_class[:title] = Title
   #
   # @return [TableRow]
   #

   def tr(*args)
     TableRow.new(self, extract_selector(args).merge(:tag_name => "tr"))
   end

   #
   # @return [TableRowCollection]
   #

   def trs(*args)
     TableRowCollection.new(self, extract_selector(args).merge(:tag_name => "tr"))
   end

   Watir.tag_to_class[:tr] = TableRow
   #
   # @return [Track]
   #

   def track(*args)
     Track.new(self, extract_selector(args).merge(:tag_name => "track"))
   end

   #
   # @return [TrackCollection]
   #

   def tracks(*args)
     TrackCollection.new(self, extract_selector(args).merge(:tag_name => "track"))
   end

   Watir.tag_to_class[:track] = Track
   #
   # @return [HTMLElement]
   #

   def u(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "u"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def us(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "u"))
   end

   Watir.tag_to_class[:u] = HTMLElement
   #
   # @return [UList]
   #

   def ul(*args)
     UList.new(self, extract_selector(args).merge(:tag_name => "ul"))
   end

   #
   # @return [UListCollection]
   #

   def uls(*args)
     UListCollection.new(self, extract_selector(args).merge(:tag_name => "ul"))
   end

   Watir.tag_to_class[:ul] = UList
   #
   # @return [HTMLElement]
   #

   def var(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "var"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def vars(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "var"))
   end

   Watir.tag_to_class[:var] = HTMLElement
   #
   # @return [Video]
   #

   def video(*args)
     Video.new(self, extract_selector(args).merge(:tag_name => "video"))
   end

   #
   # @return [VideoCollection]
   #

   def videos(*args)
     VideoCollection.new(self, extract_selector(args).merge(:tag_name => "video"))
   end

   Watir.tag_to_class[:video] = Video
   #
   # @return [HTMLElement]
   #

   def wbr(*args)
     HTMLElement.new(self, extract_selector(args).merge(:tag_name => "wbr"))
   end

   #
   # @return [HTMLElementCollection]
   #

   def wbrs(*args)
     HTMLElementCollection.new(self, extract_selector(args).merge(:tag_name => "wbr"))
   end

   Watir.tag_to_class[:wbr] = HTMLElement
 end # Container
end # Watir
